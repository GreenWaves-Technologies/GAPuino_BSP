source [find target/swj-dp.tcl]

adapter_khz 3000

global CORE_ID
if { [info exists CORE] } {
   set CORE_ID $CORE
} else {
   set CORE_ID M0 
}

echo [format "CORE in %s" $CORE_ID]

global _CHIPNAME
if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME psoc6
}

# Work-area is a space in RAM used for flash programming
# By default use 16kB
global _WORKAREASIZE
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x4000
}

global _TAPID
if { [info exists M0_TAPID] } {
   set _TAPID $M0_TAPID
} else {
   set _TAPID 0x6BA02477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_TAPID

global TARGET
set TARGET $_CHIPNAME.cpu

if { 0 == [string compare $CORE_ID M4] } {
target create $TARGET cortex_m -chain-position $TARGET -ap-num 2
echo [format "CORE_ID in %s" $CORE_ID]
} else {
target create $TARGET cortex_m -chain-position $TARGET -ap-num 1
echo [format "CORE_ID in %s" $CORE_ID]
}

$TARGET configure -work-area-phys 0x08002000 -work-area-size $_WORKAREASIZE -work-area-backup 0 -rtos auto

$TARGET configure -event gdb-attach {
echo [format "GDB_ATTACH_BEFORE_CPU in %s" [$TARGET curstate]]
reset init
echo [format "GDB_ATTACH_AFTER_CPU in %s" [$TARGET curstate]]

echo [format "APSEL in %s" $TARGET dap apsel]

}

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME psoc6 0x10000000 0 0 0 $TARGET

if {![using_hla]} {
   cortex_m reset_config sysresetreq
}

proc mread32 {addr} {
  set value(0) 0
  mem2array value 32 $addr 1
  return $value(0)
}

proc ocd_process_reset_inner { MODE } {
	if { 0 != [string compare psoc6.cpu [target names]] } {
		return -code error "PSoC 6 reset can handle only one psoc6.cpu target";
	}
	set target psoc6.cpu

    echo [format "APSEL - 1 in %s" [$target dap apsel]]

	# If this target must be halted...
	set halt -1
	if { 0 == [string compare $MODE halt] } {
		set halt 1
	}
	if { 0 == [string compare $MODE init] } {
		set halt 1;
	}
	if { 0 == [string compare $MODE run ] } {
		set halt 0;
	}
	if { $halt < 0 } {
		return -code error "Invalid mode: $MODE, must be one of: halt, init, or run";
	}

    $target invoke-event reset-assert-pre
	$target arp_reset assert 0
	$target invoke-event reset-assert-post
	$target invoke-event reset-deassert-pre
	if {![using_hla]} {	# workaround ST-Link v2 fails and forcing reconnect
		$target arp_reset deassert 0
	}
	$target invoke-event reset-deassert-post
    
	#Pass 2 - if needed "init"
	if { 0 == [string compare init $MODE] } {
		set err [catch "$target arp_waitstate halted 5000"]
		#Did it halt?
		if { $err == 0 } {
			$target invoke-event reset-init
		}
	}
	$target invoke-event reset-end
    
    # Pass 1 - Now wait for any halt (requested as part of reset
	# assert/deassert) to happen.  Ideally it takes effect without
	# first executing any instructions.
	if { $halt == 1 } {

        echo "Verify the debug enable, cpu halt bits are set"
        set halted [mread32 0xE000EDF0]
        echo [format "OCD_PROCESS_RESET_INNER FORMAT HALTED IN 0x%x" $halted]
        if { 0x00000003 != [expr ($halted & 0x00000003)] } {
          return
        }

        echo "Load infinite for loop code in SRAM address"
        mww 0x08001010 0xE7FEE7FE
               
        echo "Load PC with address of infinite for loop SRAM address"
        reg pc 0x08001011
               
        echo "Load LR with address of infinite for loop SRAM address"
        reg lr 0x08001010
               
        echo "Load SP with top of SRAM address"
        reg sp 0x0801C000
        
        echo "Read xPSR register, set the thumb bit, and restore modified value to xPSR register"
        set xPSR [ocd_reg xPSR]
        regsub {xPSR[^:]*: } $xPSR "" xPSR
        set xPSR [expr ($xPSR | 0x01000000)]
        echo [format "FORMAT xPSR in 0x%x" $xPSR]
        reg xPSR $xPSR
        
        resume
    }
    echo [format "APSEL - 2 in %s" [$target dap apsel]]
}
